var OrneryCollisionDetection=Class.create({initialize:function(){},DetectObjectCollisions:function(e){for(var t=new Array,n=0;n<e.length;n++)for(var r=e[n],i=e.slice(n+1,e.length),o=0;o<i.length;o++){var s=i[o];if(!r.fixed||!s.fixed){var a=this.DetectObjectCollision(r,s);null!=a&&t.push(a)}}return t},DetectObjectCollision:function(e,t){var n=oVec2.Subtract(e.pos,t.pos);if(n.Mag()<=e.boundingRadius+t.boundingRadius){var r=null;return r=this.MinOverlapVec(e,t,r),null==r?null:(r=this.MinOverlapVec(t,e,r),null==r?null:new Collision(r.surfaceObj,r.overlap.overlapVector,r.vertexObj,r.overlap.overlapVertex))}return null},MinOverlapVec:function(e,t,n){for(var r=e.GetSurfaceNormals(),i=0;i<r.length;i++){var o=this.OverlapVec(r[i],e.GetWorldVertices(),t.GetWorldVertices());if(null==o)return null;(null==n||n.overlap.overlapVector.Mag()>o.overlapVector.Mag())&&(n={overlap:o,surfaceObj:e,vertexObj:t})}return n},OverlapVec:function(e,t,n){var r=this.Projection(e,t),i=this.Projection(e,n);if(r.max<i.min||i.max<r.min)return null;var o=r.max-i.min,s=i.minVert,a=new oVec2;return a.SetV(e),a.SetMag(o),{overlapVector:a,overlapVertex:s}},ObjectAtPoint:function(e,t){for(var n,r=0;r<t.length;r++){n=t[r];var i=oVec2.Subtract(e,n.pos);if(i.Mag()<=n.boundingRadius){for(var o=n.GetSurfaceNormals(),s=null,a=0;a<o.length&&(s=this.OverlapVec(o[a],n.GetWorldVertices(),[e]),null!=s);a++);if(null!=s)return n}}},Projection:function(e,t){for(var n=Number.MAX_VALUE,r=-Number.MAX_VALUE,i=null,o=null,s=0;s<t.length;s++){var a=t[s],u=oVec2.Dot(e,a);n>u&&(n=u,i=a),u>r&&(r=u,o=a)}return{min:n,max:r,minVert:i,maxVert:o}}}),Collision=Class.create({initialize:function(e,t,n,r){this.surfaceObject=e,this.vertexObject=n,this.mtv=t,this.collisionNormal=oVec2.Normalize(this.mtv),this.vertex=r,this.collisionVel=null,this.impulse=null},CollisionVelocity:function(){if(null==this.collisionVel){var e=this.surfaceObject.GetVelocityOfPoint(oVec2.Subtract(this.vertex,this.surfaceObject.pos)),t=this.vertexObject.GetVelocityOfPoint(oVec2.Subtract(this.vertex,this.vertexObject.pos));this.collisionVel=oVec2.Subtract(t,e)}return this.collisionVel},Impulse:function(e){if(null==this.impulse){var t=oVec2.Dot(oVec2.Multiply(this.CollisionVelocity(),-(1+e)),this.collisionNormal),n=1/this.vertexObject.Mass()+1/this.surfaceObject.Mass()+Math.pow(oVec2.Cross(oVec2.Subtract(this.vertex,this.vertexObject.pos),this.collisionNormal),2)/this.vertexObject.momentOfInert+Math.pow(oVec2.Cross(oVec2.Subtract(this.vertex,this.surfaceObject.pos),this.collisionNormal),2)/this.surfaceObject.momentOfInert;this.impulse=t/n}return this.impulse}});